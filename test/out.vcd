$date
	Thu Oct 22 20:11:22 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ms
$end
$scope module tb $end
$var wire 1 ! z $end
$var wire 4 " c_low [3:0] $end
$var wire 4 # c_high [3:0] $end
$var wire 8 $ c [7:0] $end
$var wire 4 % b_low [3:0] $end
$var wire 4 & b_high [3:0] $end
$var wire 4 ' a_low [3:0] $end
$var wire 4 ( a_high [3:0] $end
$var reg 8 ) a [7:0] $end
$var reg 8 * b [7:0] $end
$var reg 1 + clk $end
$var reg 1 , rst $end
$var reg 1 - s $end
$var reg 1 . x $end
$scope module vadd $end
$var wire 8 / a [7:0] $end
$var wire 8 0 b [7:0] $end
$var wire 1 - s $end
$var wire 1 1 overflow $end
$var wire 1 2 carry $end
$var wire 8 3 c [7:0] $end
$scope module high $end
$var wire 4 4 a [3:0] $end
$var wire 4 5 b [3:0] $end
$var wire 1 6 carry_in $end
$var wire 5 7 cw [4:0] $end
$var wire 1 1 carry_out $end
$var wire 4 8 c [3:0] $end
$upscope $end
$scope module low $end
$var wire 4 9 a [3:0] $end
$var wire 4 : b [3:0] $end
$var wire 1 ; carry_in $end
$var wire 5 < cw [4:0] $end
$var wire 1 2 carry_out $end
$var wire 4 = c [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx =
bx <
0;
bx :
bx 9
bx 8
bx 7
06
bx 5
bx 4
bx 3
x2
x1
bx 0
bx /
x.
0-
1,
0+
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
z!
$end
#1
b0 "
b0 #
b0 =
02
b0 $
b0 3
b0 8
01
b0 %
b0 &
b0 <
b0 :
b0 7
b0 5
b0 '
b0 (
b0 9
b0 4
b0 *
b0 0
b0 )
b0 /
1+
#2
0+
#3
1+
#4
0+
#5
b110 "
b1001 #
12
b110 =
b10010110 $
b10010110 3
b1001 8
b1010 %
b1010 :
b1100 '
b1001 (
b10110 <
b1100 9
b1001 7
b1001 4
b1010 *
b1010 0
b10011100 )
b10011100 /
1+
0,
0.
#6
0+
#7
1+
#8
0+
#9
1+
#10
0+
#11
1+
#12
0+
#13
1+
#14
0+
#15
1+
x.
#16
0+
#17
1+
#18
0+
#19
1+
#20
0+
#21
1+
#22
0+
#23
1+
#24
0+
#25
b1010 #
b10100110 $
b10100110 3
b1010 8
b1010 7
16
1+
1-
1.
#26
0+
#27
1+
#28
0+
#29
1+
#30
0+
#31
1+
#32
0+
#33
1+
#34
0+
#35
1+
z.
#36
0+
#37
1+
#38
0+
#39
1+
#40
0+
#41
1+
#42
0+
#43
1+
#44
0+
#45
1+
1.
#46
0+
#47
1+
#48
0+
#49
1+
#50
0+
#51
1+
#52
0+
#53
1+
#54
0+
#55
1+
z.
#56
0+
x.
#57
1+
z.
#58
0+
1.
#59
1+
